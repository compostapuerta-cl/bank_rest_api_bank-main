// <auto-generated />
using System;
using BankRestAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BankRestAPI.Migrations
{
    [DbContext(typeof(BankDbContext))]
    [Migration("20230315182217_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BankRestAPI.Models.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Balance")
                        .HasColumnType("numeric");

                    b.Property<Guid>("BankId")
                        .HasColumnType("uuid");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CustomerDocumentNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("Number")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.HasIndex("CustomerDocumentNumber");

                    b.ToTable("Account");
                });

            modelBuilder.Entity("BankRestAPI.Models.Bank", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Bank");
                });

            modelBuilder.Entity("BankRestAPI.Models.Customer", b =>
                {
                    b.Property<string>("DocumentNumber")
                        .HasColumnType("text");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("DocumentNumber");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("BankRestAPI.Models.Transfer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("FromAccountId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FromBankId")
                        .HasColumnType("uuid");

                    b.Property<string>("FromBankName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FromCustomerDocumentNumber")
                        .HasColumnType("text");

                    b.Property<DateTime>("OperationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ToAccountId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ToBankId")
                        .HasColumnType("uuid");

                    b.Property<string>("ToBankName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ToCustomerDocumentNumber")
                        .HasColumnType("text");

                    b.Property<string>("TransactionState")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FromAccountId");

                    b.HasIndex("FromBankId");

                    b.HasIndex("FromCustomerDocumentNumber");

                    b.HasIndex("ToAccountId");

                    b.HasIndex("ToBankId");

                    b.HasIndex("ToCustomerDocumentNumber");

                    b.ToTable("Transfer");
                });

            modelBuilder.Entity("BankRestAPI.Models.Account", b =>
                {
                    b.HasOne("BankRestAPI.Models.Bank", "Bank")
                        .WithMany()
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BankRestAPI.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerDocumentNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bank");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("BankRestAPI.Models.Transfer", b =>
                {
                    b.HasOne("BankRestAPI.Models.Account", "FromAccount")
                        .WithMany()
                        .HasForeignKey("FromAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BankRestAPI.Models.Bank", "FromBank")
                        .WithMany()
                        .HasForeignKey("FromBankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BankRestAPI.Models.Customer", "FromCustomer")
                        .WithMany()
                        .HasForeignKey("FromCustomerDocumentNumber");

                    b.HasOne("BankRestAPI.Models.Account", "ToAccount")
                        .WithMany()
                        .HasForeignKey("ToAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BankRestAPI.Models.Bank", "ToBank")
                        .WithMany()
                        .HasForeignKey("ToBankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BankRestAPI.Models.Customer", "ToCustomer")
                        .WithMany()
                        .HasForeignKey("ToCustomerDocumentNumber");

                    b.Navigation("FromAccount");

                    b.Navigation("FromBank");

                    b.Navigation("FromCustomer");

                    b.Navigation("ToAccount");

                    b.Navigation("ToBank");

                    b.Navigation("ToCustomer");
                });
#pragma warning restore 612, 618
        }
    }
}
